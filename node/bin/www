require('dotenv').config();

const { getApp } = require('../app');
const debug = require('debug')('node:server');
const http = require('http');

getApp()
  .then(app => {
    const port = normalizePort(process.env.PORT || '3001');
    app.set('port', port);

    const server = http.createServer(app);
    server.listen(port);
    server.on('error', genOnError(server));
    server.on('listening', genOnListening(server));
  })
  .catch(err => {
    console.error('ERROR starting express application', err);
    process.exit(1);
  });


function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

const genOnError = server => error => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
};

const genOnListening = server => () => {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
};
